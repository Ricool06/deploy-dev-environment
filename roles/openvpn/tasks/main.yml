- name: Create CA and server groups
  group:
    name: "{{ item.group }}"
    state: present
    system: yes
  with_items: "{{ openvpn_users }}"

- name: Create CA and server users
  user:
    createhome: yes
    group: "{{ item.group }}"
    groups:
    name: "{{ item.name }}"
    state: present
    system: yes
  with_items: "{{ openvpn_users }}"

- name: Install "openvpn" package
  apt:
    name: openvpn
    state: present

- name: Make user-specific easy-rsa directories
  file:
    path: "{{ item.easy_rsa_directory }}"
    state: directory
    group: "{{ item.group }}"
    owner: "{{ item.name }}"
    mode: "u=rwx,g=rwx,o-rwx"
  with_items: "{{ openvpn_users }}"

- name: Make temporary easy-rsa directory
  file:
    path: "{{ easy_rsa.temp_directory }}"
    state: directory

- name: Download and unarchive easy-rsa "{{ easy_rsa.version }}" from github
  unarchive:
    src: "https://github.com/OpenVPN/easy-rsa/releases/download/v{{ easy_rsa.version }}/EasyRSA-{{ easy_rsa.version }}.tgz"
    dest: "{{ easy_rsa.temp_directory }}"
    remote_src: yes
    extra_opts: [--strip-components=1]
  args:
    creates: "{{ easy_rsa.temp_directory }}/easyrsa"
    # WARNING: don't set the permissions here,
    #          unarchive does not care about the extra_opts, and sets permissions
    #          for all files on the system.

  # Remote src copy doesn't support recursion, so run cp -r instead
- name: Copy unpacked easy-rsa files to users' easy-rsa directories
  command: "cp -r {{ easy_rsa.temp_directory }} {{ item.easy_rsa_directory }}"
  args:
    creates: "{{ item.easy_rsa_directory }}/easyrsa"
  with_items: "{{ openvpn_users }}"

- name: Run init-pki in CA and server directories
  command: >
    {{ item.easy_rsa_directory }}/easy-rsa/easyrsa
     --batch
     --req-cn={{ openvpn.common_name }}
     --pki-dir={{ item.pki_directory }}
     init-pki
  args:
    creates: "{{ item.pki_directory }}"
  with_items: "{{ openvpn_users }}"

- name: Run build-ca
  expect:
    command: >
      {{ openvpn_users[0].easy_rsa_directory }}/easy-rsa/easyrsa
       --batch
       --req-cn={{ openvpn.common_name }}
       --pki-dir={{ openvpn_users[0].pki_directory }}
       build-ca
    responses:
      "(?i)Enter PEM pass phrase": "{{ openvpn.ca_cert_password }}"
  args:
    creates: "{{ openvpn_users[0].pki_directory }}/ca.crt"

- name: Run gen-req for server
  command: >
    {{ openvpn_users[1].easy_rsa_directory }}/easy-rsa/easyrsa
     --batch
     --req-cn={{ openvpn.common_name }}
     --pki-dir={{ openvpn_users[1].pki_directory }}
     gen-req {{ openvpn.common_name }} nopass
  args:
    creates: "{{ openvpn_users[1].pki_directory }}/reqs/{{ openvpn.common_name }}.req"

- name: Change easy-rsa directory permissions and ownership
  file:
    path: "{{ item.easy_rsa_directory }}"
    group: "{{ item.group }}"
    owner: "{{ item.name }}"
    mode: "u=rwx,g=rwx,o-rwx"
    recurse: yes
  with_items: "{{ openvpn_users }}"

- name: Make temporary directory to store request file
  file:
    state: directory
    dest: "{{ easy_rsa.temp_reqs_directory }}"

- name: Copy server request file into a shared space so the CA can sign it
  copy:
    src: "{{ openvpn_users[1].pki_directory }}/reqs/{{ openvpn.common_name }}.req"
    dest: "{{ easy_rsa.temp_reqs_directory }}/{{ openvpn.common_name }}.req"
    remote_src: yes
    group: "{{ openvpn_users[0].group }}"
    owner: "{{ openvpn_users[0].name }}"

- name: Import request file to be signed
  command: >
    {{ openvpn_users[0].easy_rsa_directory }}/easy-rsa/easyrsa
     --batch
     --req-cn={{ openvpn.common_name }}
     --pki-dir={{ openvpn_users[0].pki_directory }}
     import-req {{ easy_rsa.temp_reqs_directory }}/{{ openvpn.common_name }}.req {{ openvpn.common_name }}
  args:
    creates: "{{ openvpn_users[0].pki_directory }}/reqs/{{ openvpn.common_name }}.req"

- name: Sign request file as a server
  expect:
    command: >
      {{ openvpn_users[0].easy_rsa_directory }}/easy-rsa/easyrsa
       --batch
       --req-cn={{ openvpn.common_name }}
       --pki-dir={{ openvpn_users[0].pki_directory }}
       sign-req server {{ openvpn.common_name }}
    responses:
      "(?i)Confirm request details": yes
      "(?i)Enter pass phrase for": "{{ openvpn.ca_cert_password }}"
  args:
    creates: "{{ openvpn_users[0].pki_directory }}/issued/{{ openvpn.common_name }}.crt"

- name: Return signed certificate to server
  copy:
    src: "{{ openvpn_users[0].pki_directory }}/issued/{{ openvpn.common_name }}.crt"
    dest: "{{ openvpn_users[1].pki_directory }}/{{ openvpn.common_name }}.crt"
    remote_src: yes

- name: Return ca certificate to server
  copy:
    src: "{{ openvpn_users[0].pki_directory }}/ca.crt"
    dest: "{{ openvpn_users[1].pki_directory }}/ca.crt"
    remote_src: yes

- name: Generate Diffie-Hellman parameters (can take a while)
  command: "{{ openvpn_users[1].easy_rsa_directory }}/easy-rsa/easyrsa --pki-dir={{ openvpn_users[1].pki_directory }} gen-dh"
  args:
    creates: "{{ openvpn_users[1].pki_directory }}/dh.pem"

- name: Generate static key to be pre-shared
  command: >
    openvpn --genkey --secret {{ openvpn_users[1].pki_directory }}/private/ta.key
  args:
    creates: "{{ openvpn_users[1].pki_directory }}/private/ta.key"

- name: Create server config file
  template:
    src: server.conf.j2
    dest: "/etc/openvpn/server.conf"
  notify:
    - restart openvpn

- name: Change private directory permissions and ownership
  file:
    path: "{{ item.pki_directory }}"
    group: "{{ item.group }}"
    owner: "{{ item.name }}"
    mode: "u=rwx,g-rwx,o-rwx"
    recurse: yes
  with_items: "{{ openvpn_users }}"

- name: Enable IP forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: 1
    state: present

  # https://www.karlrupp.net/en/computer/nat_tutorial
  # Have a look here to see how this works, look for the section with the
  # iptables usage
- name: Masquerade packets from clients as packets from VPN server
  iptables:
    action: append
    chain: POSTROUTING
    jump: MASQUERADE
    table: nat
